from model_selectors.model.convnet import ConvNet
from model_selectors.model.inception_time import InceptionModel
from model_selectors.model.resnet import ResNetBaseline
from model_selectors.model.sit import SignalTransformer
import numpy as np

# Important paths
data_path = "data/OBSEA/data/"              # path to the raw data
metrics_path = "data/OBSEA/metrics/"        # path to the folder storing metrics of the dataset
scores_path = "data/OBSEA/scores/"          # path to the folder storing all scores of the dataset (generated by anomaly detectors)
rootcause_data_path = "data/OBSEA/data_column/" # path to the folder storing which dimension causing anomalies (used for interpretability)

save_done_training = 'results/done_training/'	# when a model is done training a csv with training info is saved here
path_save_results = 'results/raw_predictions'	# when evaluating a model, the predictions will be saved here

# Detector
detector_names = [
    'AutoEncoder (AE)', 
      'CBLOF',
      'COPOD', 
      'DenoisingAutoEncoder (DAE)',
      'HBOS',
      'LOF',
      'PCC', 
      'RobustPCA',
      'Random Black Forest (RR)', 
      'Torsk',
]


# Dict of model names to Constructors
deep_models = {
	'convnet':ConvNet,
	'inception_time':InceptionModel,
	'inception':InceptionModel,
	'resnet':ResNetBaseline,
	'sit':SignalTransformer,
}

num_dimensions = 3 # the number of dimensions the time series contains
data_stat_mean = np.array([37.79987549, 4.92507308, 18.03925078]) # the mean of the each dimension of the time series dataset (used for data normalization)
data_stat_std = np.array([0.14562043, 0.03604426, 0.30548436]) # the std of the each dimension of the time series dataset (used for data normalization)
